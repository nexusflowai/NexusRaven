[
    {
        "Output_Original": [
            "getmaptilewithspanishlabels(\"z\" = 3,  \"x\" = 4,  \"y\" = 2)",
            "maptiles"
        ],
        "Output": "getmaptilewithspanishlabels(z= 3,  x= 4,  y= 2)",
        "context": [
            "def getmaptilewithspanishlabels(z: int=3, x: int=4, y: int=2):\n    'Raster Map Tiles with Spanish Labels. Please see [tutorial](https://rapidapi.com/MapTilesApi/api/maptiles/tutorials/openstreetmap-in-spanish---add-a-spanish-map-to-your-website-with-leaflet-js-and-maptiles-api) on how to use the Spanish world map.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getmaptilewithspanishlabels': return_dict})",
            "def tournamentdetails(tournamentId: int=113935):\n    'This operation allows you to retrieve details for a specified MMA tournament.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'tournamentdetails_mmaapi': return_dict})",
            "def playerplaceholderimage():\n    'Get the player placeholder image in PNG format.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'playerplaceholderimage_baseballapi': return_dict})",
            "def tournamentallevents(tournamentId: int=114389, uniqueTournamentId: int=19906):\n    'Get all MMA events for a unique tournament and tournament ID'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'tournamentallevents_mmaapi': return_dict})",
            "def tournamentfeaturedevents(tournamentId: int=19906):\n    'Get featured events for a unique tournament'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'tournamentfeaturedevents_mmaapi': return_dict})",
            "def all_german_cities():\n    'Get all German cities'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'all_german_cities_locations_languages_countries_german_cities': return_dict})",
            "def all_divisions():\n    '`/v1.0/divisions`\\n\\tGet all divisions of Bangladesh in English and Bangla.\\n\\t\\n\\t**Response**\\n\\t```\\n\\tstatus: object,\\n\\tdata: [\\n\\t  _id: string,\\n\\t  division: string\\n\\t  divisionbn: string\\n\\t]\\n\\t```'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'all_divisions_bdapi': return_dict})",
            "def get_ratings_by_restaurant(restaurant: str='Shovels Inn'):\n    'Find a Food Hygiene Rating for a restaurant'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_ratings_by_restaurant_wyre_data': return_dict})",
            "def matchheadtoheadduel(id: int=10485760):\n    'Get headtohead resume for a handball match by ID.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'matchheadtoheadduel_handballapi': return_dict})",
            "def chain_id(chain: ENUM=None):\n    'Retrieve Chain ID for the selected blockchain.\\n\\t\\n\\tSupported blockchains:\\n\\t- `ethereum`;\\n\\t- `binance`;\\n\\t- `polygon`;\\n\\t- `solana`;\\n\\t- `ethereum-ropsten`;\\n\\t- `ethereum-rinkeby`;\\n\\t- `ethereum-goerli`;\\n\\t- `ethereum-kovan`;\\n\\t- `binance-testnet`;\\n\\t- `polygon-mumbai`.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'chain_id_webit_blockchain': return_dict})"
        ],
        "ToolName": "maptiles",
        "Input": "I am working on a travel blog and need some visually appealing maps to include in my posts. Can you provide me with a Spanish map tile for zoom level 3, x-coordinate 4, and y-coordinate 2? Additionally, can you suggest some popular tourist destinations in Spain?"
    },
    {
        "Output_Original": [
            "hashtag(\"hashtag\" = \"football\",  \"raw\" = false)",
            "instagram_1"
        ],
        "Output": "hashtag(hashtag= \"football\",  raw= False)",
        "context": [
            "def hashtag(hashtag: str='football', raw: bool=None):\n    'Posts by hashtag'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'hashtag': return_dict})",
            "def challenge_videos(hashtag: str='fyp', cursor: str=''):\n    'get challenge videos by challenge _id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'challenge_videos_tiktok_v3': return_dict})",
            "def get_all_highlights(userId: int=325734299):\n    'Receive a list of all highlights, including the cover image.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_highlights_instagram_api_media_downloader': return_dict})",
            "def get_individual_link(id: str=''):\n    ''\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_individual_link_geeklist': return_dict})",
            "def location_stories(location_ids: str='2082352,75929182,6811413,130521400908152,59736,1161978,221177873,187178655154203,213738210,31674623,108501223869479,3001373,2697489,104546711092300,101783925392544,172427163524368,1168731,108132485226859,352171722223706,1591553364396906,212969193,857197433,99229,94124,442981000,520942188253800,107090008453624,217007835,734833689886989,252838'):\n    'Get location user stories by using set of location ids values.  \\n\\t\\n\\t**Location ids can be found by using /location/search endpoint**'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'location_stories_instagram_data': return_dict})",
            "def get_authenticated_users_links():\n    ''\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_authenticated_users_links_geeklist': return_dict})",
            "def social_profiles():\n    'Returns information about connected social profiles.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'social_profiles_ocoya': return_dict})",
            "def user_by_rest_id(user_id: str='44196397'):\n    'Get User By Rest ID'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'user_by_rest_id_twitter_v2': return_dict})",
            "def v2_user_following(id: str='44196397', count: int=20, cursor: str=''):\n    'v2 / User Following'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'v2_user_following_twitter_v4': return_dict})",
            "def videos_by_music(music_id: str='6761543137128089601', cursor: str=''):\n    'get videos by music_id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'videos_by_music_tiktok_v3': return_dict})"
        ],
        "ToolName": "instagram_1",
        "Input": "I'm writing an article about football and I need some visual content. Can you fetch me the latest Instagram posts with the hashtag 'football'? It would be helpful to have access to the captions, timestamps, images, usernames, and avatars of the users who posted them. If possible, please also include the number of likes and the dimensions (width and height) of the images."
    },
    {
        "Output_Original": [
            "email_validate_regex(\"email\" = \"contact@mycompany.com\")",
            "email_validator_v3"
        ],
        "Output": "email_validate_regex(email= \"contact@mycompany.com\")",
        "context": [
            "def email_validate_regex(email: str='test@gmail.com'):\n    'Email Validate Regex'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'email_validate_regex': return_dict})",
            "def teamnextevents(page: int=None, id: int=465171):\n    'Get information about the next events for a specific team.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'teamnextevents_mmaapi': return_dict})",
            "def competitions_get_table(seasonID: str='2020', id: str='GB1', homeAway: str='', domain: str='de'):\n    'Get table by competition and season'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'competitions_get_table_transfermarket': return_dict})",
            "def team_shirts(team_player: str='player', team: str='home', event_id: int=10023294):\n    'Get team shirts by event_id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'team_shirts_sofasport': return_dict})",
            "def teamdetails(id: int=465171):\n    'Get detailed information about a specific team.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'teamdetails_mmaapi': return_dict})",
            "def list_invite_templates(size: int=10, cursor: str=''):\n    'Get the list of invite templates.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'list_invite_templates_smile': return_dict})",
            "def getpetbyid(petId: int=None):\n    'Returns a single pet'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getpetbyid_petstoreapi2_0': return_dict})",
            "def m2_5_earthquakes_past_hour():\n    'Magnitude 2.5+ Earthquakes, Past Hour'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'m2_5_earthquakes_past_hour_everyearthquake': return_dict})",
            "def user_tv_channel(count: int=12, userid: int=25025320, end_cursor: str=''):\n    'Get instagram user tv channel by user id.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'user_tv_channel_instagram_v13': return_dict})",
            "def list_replies_by_comment(aweme_id: str='', comment_id: str='', count: int=10, cursor: int=0, proxy: str=''):\n    'List Replies By Comment'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'list_replies_by_comment_tiktok_private': return_dict})"
        ],
        "ToolName": "email_validator_v3",
        "Input": "I need to check if the email 'contact@mycompany.com' is valid. Can you help me with that?"
    },
    {
        "Output_Original": [
            "search(\"query\" = \"travel accessories\",  \"country\" = \"US\")",
            "real_time_amazon_data"
        ],
        "Output": "search(query= \"travel accessories\",  country= \"US\")",
        "context": [
            "def search(query: str='Phone', min_price: int=None, brand: str='', max_price: int=None, page: str='1', country: str='US', category_id: str='aps', sort_by: ENUM=None):\n    'Search for products offers on Amazon.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'search': return_dict})",
            "def kompas_search(limit: int=10, page: int=1, command: str='banjir'):\n    'kompas-search'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'kompas_search_indonesia_news': return_dict})",
            "def get_places_json():\n    'Retrieving a list of the created places by application'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_places_json_quickblox': return_dict})",
            "def lopp1(bbb: str=''):\n    'niisamalopp'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'lopp1_bitikas1': return_dict})",
            "def recent_50():\n    'GET the recent 50 news'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'recent_50_moka_news': return_dict})",
            "def get_geodata_find_json():\n    'Retrieve all (by default) geodata for current application. The ID of the application is taken from the token which is specified in the request'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_geodata_find_json_quickblox': return_dict})",
            "def retrieve_data(rank: str='', page: str='', search: str=''):\n    'Endpoint, which you use to retrieve the data you need. This endpoint can accept some parameters like page, search key and data range'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'retrieve_data_instant_cameroon_news': return_dict})",
            "def hibapress():\n    '\u0645\u0633\u0627\u0631 \u064a\u0633\u062a\u0631\u062c\u0639 \u0627\u062e\u0631 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0645\u0646 \u0645\u0648\u0642\u0639 \u0647\u0628\u0629 \u0628\u0631\u064a\u0633'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'hibapress_arabic_news_api': return_dict})",
            "def latest_news(limit: int=5):\n    'Get the latest news and stories from different sources'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'latest_news_philippine_news': return_dict})",
            "def domains_list():\n    'Get a list of Domains, available domains code, currencies and locales'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'domains_list_hotels_com_provider': return_dict})"
        ],
        "ToolName": "real_time_amazon_data",
        "Input": "I'm planning a family vacation and need some travel essentials. Can you search for travel accessories on Amazon and provide me with the product details for ASIN B08BHXG144? Additionally, I would like to see the top 10 offers for this product and read the reviews for ASIN B07ZPKN6YR. Furthermore, please give me the list of product categories available in the US marketplace."
    },
    {
        "Output_Original": [
            "getmakaniinfofromcoordination(\"latitude\" = 25.264637,  \"longitude\" = 55.312168)",
            "dubai_makani"
        ],
        "Output": "getmakaniinfofromcoordination(latitude= 25.264637,  longitude= 55.312168)",
        "context": [
            "def getmakaniinfofromcoordination(latitude: int=25.264637, longitude: int=55.312168):\n    'When entering the coordinate (latitude & longitude) for certain\\n\\tlocation, this method/function will return building details (in case\\n\\tthis location falls inside a building), Makani details for the building\\n\\tand latitude & longitude for each Makani Number. Makani\\n\\tentrance(s) for the building can be plotted / pinned on an\\n\\telectronic map by using the latitude & longitude for each Makani\\n\\tNumber.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getmakaniinfofromcoordination': return_dict})",
            "def aroon(symbol: str='AAPL', interval: str='1min', format: str='json', time_period: int=14, outputsize: int=30):\n    'Aroon Indicator(AROON) is used to identify if the price is trending. It can also spot the beginning of a new trend and its strength.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'aroon_twelve_data': return_dict})",
            "def ht_sine(interval: str='1min', symbol: str='AAPL', series_type: str='close', format: str='json', outputsize: int=30):\n    'Hilbert Transform SineWave(HT_SINE) is part of Hilbert Transforms concepts. You can read more about it in the Rocket Science for Traders book by John F. Ehlers.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'ht_sine_twelve_data': return_dict})",
            "def bbands(symbol: str='AAPL', interval: str='1min', sd: int=2, series_type: str='close', ma_type: str='SMA', time_period: int=20, outputsize: int=30, format: str='json'):\n    'Bollinger Bands\u00ae(BBANDS) are volatility bands located above and below a moving average. The volatility size parameter depends on standard deviation.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'bbands_twelve_data': return_dict})",
            "def natr(symbol: str='AAPL', interval: str='1min', outputsize: int=30, time_period: int=14, format: str='json'):\n    'Normalized Average True Range(NATR) is used to compare and analyze across different price levels due to its normalized quality, which might be more effective than the original ATR.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'natr_twelve_data': return_dict})",
            "def picture_of_the_day():\n    'This Endpoint returns an astronomy image of the univers with caption and explanation from professionals.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'picture_of_the_day_astronomy_picture_of_the_day': return_dict})",
            "def get_all_crypto_news():\n    'This endpoint will return all news with crypto and bitcoin from many different websites across the internet.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_crypto_news_crypto_news_v2': return_dict})",
            "def auto_complete(q: str='macbook air'):\n    'Get suggestion by term or phrase'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'auto_complete_target': return_dict})",
            "def time_series(symbol: str='AMZN', interval: str='1day', outputsize: int=30, format: str='json'):\n    'This API call returns meta and time series for equities. Meta object consists of general information about the requested symbol. Time series is the array of objects ordered by time descending with Open, High, Low, Close prices + Volume.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'time_series_twelve_data': return_dict})",
            "def teams():\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'teams_signl4_critical_mobile_alerting': return_dict})"
        ],
        "ToolName": "dubai_makani",
        "Input": "Could you please help me find the Makani information for a specific location in Dubai using the coordinates 25.264637 and 55.312168? Also, provide me with the QR code for the entrance and nearby pizza places for a quick bite."
    },
    {
        "Output_Original": [
            "getsinglepageinfo(\"link\" = \"https://www1.gogoanime.ai/majutsushi-orphen-hagure-tabi-seiiki-hen-episode-8\")",
            "gogoanime_data_api"
        ],
        "Output": "getsinglepageinfo(link= \"https://www1.gogoanime.ai/majutsushi-orphen-hagure-tabi-seiiki-hen-episode-8\")",
        "context": [
            "def getsinglepageinfo(link: str='majutsushi-orphen-hagure-tabi-seiiki-hen-episode-8'):\n    'GetInfoFrom SingleAnime Pages'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getsinglepageinfo': return_dict})",
            "def basketballv3():\n    'Basketball rankings v3'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'basketballv3_v3rankings': return_dict})",
            "def rugbyleagueawayteamevents(seasonId: int=43002, tournamentId: int=423):\n    'This endpoint retrieves the last 5 matches for a specific league in a given season for away events.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'rugbyleagueawayteamevents_allsportsapi': return_dict})",
            "def getxfapdfinstoragetoacroform(name: str='', storage: str='', folder: str=''):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getxfapdfinstoragetoacroform_aspose_pdf_cloud': return_dict})",
            "def locations_v2_search_deprecated(query: str='new york', locale: str='en_US', currency: str='USD'):\n    'Search for related locations and suggestions'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'locations_v2_search_deprecated_hotels': return_dict})",
            "def temp_upload_urls(source_name: str='', video_id: str='', account_id: str=''):\n    'Generate Temp Upload URLs'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'temp_upload_urls_fake_brightcove': return_dict})",
            "def get_a_specific_team(id: str=''):\n    'This endpoint retrieves a specific team'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_a_specific_team_free_nba': return_dict})",
            "def rugbyplayerlastmatches(page: int=0, id: int=862142):\n    'Get player last matches.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'rugbyplayerlastmatches_allsportsapi': return_dict})",
            "def get_all_world_footbol_news_live():\n    'This end point will return back all news about footbol.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_world_footbol_news_live_live_world_futbol_news': return_dict})",
            "def geocode(address: str='Giza'):\n    'This endpoint allows you to lookup locations in Egypt by providing an address query parameter. It returns the latitude, longitude and city name of the location.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'geocode_egypt_api': return_dict})"
        ],
        "ToolName": "gogoanime_data_api",
        "Input": "I'm a developer working on an anime website and I need to integrate data from the gogoanime website. Can you provide me with the information for the anime 'Majutsushi Orphen Hagure Tabi: Seiiki Hen' episode 8? Additionally, I would like to get the recent animes from the gogoanime recent page."
    },
    {
        "Output_Original": [
            "age_calculator(\"date\" = \"2010-01-05\")",
            "age_calculator"
        ],
        "Output": "age_calculator(date= \"2010-01-05\")",
        "context": [
            "def age_calculator(date: str='19870630', timezone: str='US/Eastern'):\n    'Calculates age based on the requested date. Accepts different formats and Time Zones.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'age_calculator': return_dict})",
            "def vin_decoder_basic(vin: str='5YJ3E1EA6PF384836'):\n    'Get 22 items'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'vin_decoder_basic_vin_decoder': return_dict})",
            "def products_v2_list(category: str='5xtg6', store_id: str='911', offset: int=0, faceted_value: str='', sort_by: str='relevance', keyword: str='', default_purchasability_filter: bool=True, count: int=20):\n    'List products in specific store with options and filters'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'products_v2_list_target': return_dict})",
            "def get_property_checkout_price(checkOut: datetime=None, checkIn: datetime=None, propertyId: int=None, adults: int=None, pets: int=None, children: int=None, currency: str='USD', languageId: str='', infants: int=None):\n    'This API will return the checkout cost of the Property'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_property_checkout_price_airbnb_v2': return_dict})",
            "def get_nfts():\n    'Fetch the list of owned NFTs by the wallet'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_nfts_felina_multisig_wallet_api': return_dict})",
            "def sign_info(useragent: str=''):\n    'Get required up to date sign info'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'sign_info_onlyfans': return_dict})",
            "def social_media_news_in_german():\n    'Get social media news in German'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'social_media_news_in_german_onelike': return_dict})",
            "def social_media_news_in_spanish():\n    'Get social media news in Spanish'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'social_media_news_in_spanish_onelike': return_dict})",
            "def get_currency():\n    'Get Currency'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_currency_airbnb_search': return_dict})",
            "def latest_news_on_crypto():\n    'Returns the latest news  about crypto from several newspapers and websites'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'latest_news_on_crypto_h_crypto_news': return_dict})"
        ],
        "ToolName": "age_calculator",
        "Input": "I'm planning a family trip to Asia and I need to calculate the age of my children based on their birth dates. The birth dates are January 5, 2010 and March 20, 2014. Can you provide me with their ages in years, months, and days? Also, I would like to know the available symbols and datasets for the Tardis.dev API."
    },
    {
        "Output_Original": [
            "bmi(\"weight\" = 70,  \"height\" = 175)",
            "bmi_calculator_v2"
        ],
        "Output": "bmi(weight= 70,  height= 175)",
        "context": [
            "def bmi(weight: int=86, height: int=184, system: str='metric'):\n    'Calculate BMI using weight and height.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'bmi': return_dict})",
            "def news_source(source_id: str='bbc'):\n    'Get the latest news stories for the respective `{source_id}` in chronological order.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'news_source_biztoc': return_dict})",
            "def get_articles_by_date(date: str='01-04-2021'):\n    'Get Articles by  Date'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_articles_by_date_reuters_business_and_financial_news': return_dict})",
            "def introduction_page():\n    'Credit to developer.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'introduction_page_political_bias_database': return_dict})",
            "def trending(offset: int=None, language: str='en', category: ENUM=None, from_sources: str='', number: int=None, has_image: bool=None, exclude_sources: str=''):\n    'Get a continuously updated, rich feed of articles finely picked by a sophisticated A.I.\\n\\t\\n\\tTry it live at: https://webit.re/services/internet-search/news-search-api/tryout'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'trending_webit_news_search': return_dict})",
            "def fetch_all_allsides_com_data():\n    'get request that returns entire allsides.com database as a json.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'fetch_all_allsides_com_data_political_bias_database': return_dict})",
            "def fetch_all_mediabiasfactcheck_com_data():\n    'get request that returns entire mediabiasfactcheck.com database as a json.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'fetch_all_mediabiasfactcheck_com_data_political_bias_database': return_dict})",
            "def asoy(year: int=2000):\n    'Returns JSON block of results for All States, One Year (ASOY), for the specified US Presidential Election year (i.e., 2008).'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'asoy_us_presidential_election': return_dict})",
            "def get_all_news_on_pollution():\n    'This endpoint would return all news on pollution in african countries available in our database.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_news_on_pollution_pollution_news_api': return_dict})",
            "def osay(state: str='illinois'):\n    'Returns JSON block of results for One State, All Years (OSAY), for the specified US Presidential Election year (i.e., Illinois).'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'osay_us_presidential_election': return_dict})"
        ],
        "ToolName": "bmi_calculator_v2",
        "Input": "My friend is concerned about her health and wants to calculate her BMI. She weighs 70kg and is 175cm tall. Can you help her with this? Additionally, she would like to know the cancer rates in her state for further health awareness."
    },
    {
        "Output_Original": [
            "get_all_the_shoes()",
            "shoes_collections"
        ],
        "Output": "get_all_the_shoes()",
        "context": [
            "def get_all_the_shoes():\n    'This end point return the collection of shoes'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_the_shoes': return_dict})",
            "def get_regular_commodities():\n    'Get List of Regular Commodities with Quotes'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_regular_commodities_argaam_data_apis_free': return_dict})",
            "def listoforders(action: str='orders_list', status: str=''):\n    'API Instructions: https://www.mktplace.eu/api-instructions-i-32.html\\n\\t\\n\\tSell on mktplace.eu: https://www.mktplace.eu/sell-on-mktplace-i-25.html'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'listoforders_sandbox_mktplace_eu_04_orders': return_dict})",
            "def getthelistofcountriesregistered(action: str='countries'):\n    'API Instructions: https://www.mktplace.eu/api-instructions-i-32.html\\n\\t\\n\\tSell on mktplace.eu: https://www.mktplace.eu/sell-on-mktplace-i-25.html'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getthelistofcountriesregistered_sandbox_mktplace_eu_04_orders': return_dict})",
            "def get_categories():\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_categories_my_store': return_dict})",
            "def get_product(id: int=None):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_product_my_store': return_dict})",
            "def recipient(limit: int=10, lastRecipientKey: str='recipient#1660831535'):\n    'List of the recipients for the client'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'recipient_finhost': return_dict})",
            "def sawyer_test():\n    'test'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'sawyer_test_sawyertest': return_dict})",
            "def form_check_instance(password: str='password', id: str='1234', name: str='mybot', application: str='myapp', user: str='myuserid', token: str='123456'):\n    \"The form-check-instance API validates that a bot ID or name exists, and returns the bot's details.\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'form_check_instance_botlibre': return_dict})",
            "def form_check_user(user: str='myuserid', application: str='myapp', password: str='password', token: str='123456'):\n    \"The form-check-user API validates user, and returns the user's details.\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'form_check_user_botlibre': return_dict})"
        ],
        "ToolName": "shoes_collections",
        "Input": "I am a shoe collector and I want to expand my collection. Can you provide me with a collection of unique and rare shoes along with their prices, images, descriptions, quantities, and ratings? Can you suggest any APIs that can help me with this?"
    },
    {
        "Output_Original": [
            "get_16_day_forecast(\"lat\" = -8.409518,  \"lon\" = 115.188916,  \"units\" = \"metric\")",
            "weather"
        ],
        "Output": "get_16_day_forecast(lat= -8.409518,  lon= 115.188916,  units= \"metric\")",
        "context": [
            "def get_16_day_forecast(lon: int=(- 78.5), lat: int=38.5, lang: ENUM=None, units: ENUM=None):\n    'Returns a 16 day (daily) forecast'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_16_day_forecast': return_dict})",
            "def blur(url: str='https://picsum.photos/400/300'):\n    'Blur Image'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'blur_dagpi': return_dict})",
            "def qualifying_results(year: int=2014, location: str='austria'):\n    'Use this endpoint to retrieve the qualifying results for a specific race by specifying the year and location as path parameters. The parameters are required.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'qualifying_results_fia_formula_1_championship_statistics': return_dict})",
            "def gettaxrulesv2():\n    'getTaxRulesV2 data'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'gettaxrulesv2_betsports': return_dict})",
            "def stats_get_records(statsType: str='mostRuns', year: int=None, opponent: int=None, team: int=None, matchType: int=None):\n    'Get records'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'stats_get_records_cricbuzz_cricket': return_dict})",
            "def challenges_list(page: int=1):\n    'Returns a list of challenges'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'challenges_list_sportscore': return_dict})",
            "def getspecialcompetitionview():\n    'getSpecialCompetitionView data'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getspecialcompetitionview_betsports': return_dict})",
            "def pitstop_summary(year: int=2021, location: str='abu dhabi'):\n    'Use this endpoint to retrieve the pitstop summary about a specific race by passing path parameters year & location. The path parameters are required.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'pitstop_summary_fia_formula_1_championship_statistics': return_dict})",
            "def channels_list(locale: str='DE'):\n    'Get a list of channels by country'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'channels_list_sofascores': return_dict})",
            "def fastest_laps_result(location: str='bahrain', year: int=2022):\n    'Use this endpoint to retrieve information about fastest laps for a specific race by passing path parameters location & year. The path parameters are required.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'fastest_laps_result_fia_formula_1_championship_statistics': return_dict})"
        ],
        "ToolName": "weather",
        "Input": "I want to surprise my partner with a romantic getaway to a tropical destination. Can you give me the 16-day weather forecast for Bali, Maldives, and Bora Bora?"
    },
    {
        "Output_Original": [
            "realtime_weather_api(\"q\" = \"Miami Beach\")",
            "weatherapi_com"
        ],
        "Output": "realtime_weather_api(q= \"Miami Beach\")",
        "context": [
            "def realtime_weather_api(q: str='53.1,-0.13'):\n    'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'realtime_weather_api': return_dict})",
            "def venues_get_matches(venueId: int=45):\n    'Get scheduled matches by venue'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'venues_get_matches_cricbuzz_cricket': return_dict})",
            "def teams_get_news(teamId: int=2):\n    'Get news by team'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'teams_get_news_cricbuzz_cricket': return_dict})",
            "def bans_esports(event_id: int=10289011):\n    'Get bans (esports) by event_id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'bans_esports_sofascores': return_dict})",
            "def gettaxrulesv2():\n    'getTaxRulesV2 data'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'gettaxrulesv2_betsports': return_dict})",
            "def player_statistics(seasons_id: int=37167, player_id: int=12994, unique_tournament_id: int=34, player_stat_type: str='overall'):\n    'Get player statistics. Use `regularSeason` - for hockey'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'player_statistics_sofascores': return_dict})",
            "def get_daily_nfl_schedule(gameDate: str='20221211'):\n    'Get basic information on which games are being played during a day.  \\n\\tcall is like this:\\n\\t/getNFLGamesForDate?gameDate=20221211\\n\\tThe above call will return all of the games from December 11th, 2022.  Date must be in that format.  \\n\\tThey come back in a list format within the body of the response.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_daily_nfl_schedule_tank01_nfl_live_in_game_real_time_statistics_nfl': return_dict})",
            "def country_channels(event_id: int=10253769):\n    'Get tv country channels by event_id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'country_channels_sofascores': return_dict})",
            "def player_latest_media(player_id: int=12994):\n    \"Get player's latest media by player_id\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'player_latest_media_sofascores': return_dict})",
            "def players_get_news(playerId: int=8733):\n    'Get news by player'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'players_get_news_cricbuzz_cricket': return_dict})"
        ],
        "ToolName": "weatherapi_com",
        "Input": "I'm organizing a beach party for my friends and I need to know the weather conditions for tomorrow at Miami Beach. Can you provide me with the current weather details?"
    },
    {
        "Output_Original": [
            "evaluate_expression(\"expression\" = \"($150 * 20) + ($50 * 15) + ($100 * 10)\")",
            "evaluate_expression"
        ],
        "Output": "evaluate_expression(expression= \"($150 * 20) + ($50 * 15) + ($100 * 10)\")",
        "context": [
            "def evaluate_expression(expression: str='$950 - 10% discount'):\n    'Scans the given expression and returns the result of any calculation found, in plain text.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'evaluate_expression': return_dict})",
            "def get_a_full_list_of_conversions_with_statistics(timeframe: str='', fromDay: str='', toDay: str='', sortDirection: str='', status: str='', sortby: str='', favourite: bool=None, limit: str='', offset: str=''):\n    'Get a full list of conversions with statistics'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_a_full_list_of_conversions_with_statistics_clickmeter': return_dict})",
            "def modifysvg(name: str='', colorType: str='Rgb', folder: str='', borderY: int=None, storage: str='', bkColor: str='white', format: str='svg', borderX: int=None, pageWidth: int=None, textAsShapes: bool=False, scaleY: int=0, pageHeight: int=None, scaleX: int=0, fromScratch: bool=False):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'modifysvg_aspose_imaging_cloud': return_dict})",
            "def get_gas_price(chainId: int=1):\n    'Gets the best estimate for gas price to use in a transaction.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_gas_price_uniblock': return_dict})",
            "def getproducts(page: int=None, query: str='iphone 14', period: int=None):\n    'Get Etsy products'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getproducts_etsy_products_api_allows_you_to_scrape_the_products_from_etsy': return_dict})",
            "def products_detail(goods_id: str='2506647', currency: str='USD', country: str='US', language: str='en'):\n    'Get detailed information of a product'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'products_detail_unofficial_shein': return_dict})",
            "def get_all_crypto_news():\n    'This endpoint will return all news articles about Crypto from over 70 different websites'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_crypto_news_crypto_news_v11': return_dict})",
            "def products_search_deprecated(start: str='0', rows: str='60', query: str='jackets', sizes: str='', brand: str='', sort: str='', gender: str='', color_groups: str='black'):\n    'Search for product by name'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'products_search_deprecated_forever21': return_dict})",
            "def eventlist():\n    ''\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'eventlist_get_31events_send_native_calendar_invites': return_dict})",
            "def events_player_statistics(event_id: int=10023294, player_id: int=839410):\n    'Get player statistics by event_id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'events_player_statistics_os_sports_perform': return_dict})"
        ],
        "ToolName": "evaluate_expression",
        "Input": "My company is planning a team-building event at a remote location, and we need to calculate the total cost of the event. Evaluate the expression '($150 * 20) + ($50 * 15) + ($100 * 10)' to find the total cost."
    },
    {
        "Output_Original": [
            "rapidapigetobservationhistorybycoordinates(\"latitude\" = 36.1069,  \"longitude\" = -112.1129)",
            "forecast"
        ],
        "Output": "rapidapigetobservationhistorybycoordinates(latitude= 36.1069,  longitude= -112.1129)",
        "context": [
            "def rapidapigetobservationhistorybycoordinates(longitude: int=10.19575, latitude: int=46.97433):\n    'Get an Observation object with historical information.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'rapidapigetobservationhistorybycoordinates': return_dict})",
            "def race_results(year: int=1987):\n    'Use this endpoint to retrieve race results data about a specific F1 championship by specifying a year. If you ommit the ***year*** query parameter, a default value will be set to current year. The response data will contain information about the Grand Prix, Date, Winner, Car (Team), Laps & overall time of each driver in the form of a collection.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'race_results_fia_formula_1_championship_statistics': return_dict})",
            "def russian_premier_league_standings(season: str=''):\n    'Russian Premier League Standings'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'russian_premier_league_standings_russian_premier_league_standings': return_dict})",
            "def series_get_stats(seriesId: int=3718, statsType: str='mostRuns'):\n    'Get stats'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'series_get_stats_cricbuzz_cricket': return_dict})",
            "def game_report(id: int=1596, tz: str='America/New_York'):\n    'Get game score, goals, penalties and team statistics for a certain game ID'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'game_report_hockey_live_sk_data': return_dict})",
            "def channels_data(event_id: int=10253769, channel_id: int=2707):\n    'Get channels data'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'channels_data_sofascores': return_dict})",
            "def matches_list(type: str='recent'):\n    'List live, recent, upcoming matches'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'matches_list_cricbuzz_cricket': return_dict})",
            "def get_banners_new():\n    'get-banners-new data'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_banners_new_betsports': return_dict})",
            "def teams_get_players(teamId: int=2):\n    'Get players by team'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'teams_get_players_cricbuzz_cricket': return_dict})",
            "def attribute_overviews(player_id: int=12994):\n    'Get player attribute overviews'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'attribute_overviews_sofascores': return_dict})"
        ],
        "ToolName": "forecast",
        "Input": "My friends and I are organizing a hiking trip to the Grand Canyon. Can you give us the historical weather data for the past month, including temperature, wind speed, and precipitation?"
    },
    {
        "Output_Original": [
            "get_call(\"request_id\" = \"76d1c748-51ed-435b-bcd8-3d9c9d3eb68a\")",
            "face_compare"
        ],
        "Output": "get_call(request_id= \"76d1c748-51ed-435b-bcd8-3d9c9d3eb68a\")",
        "context": [
            "def get_call(request_id: str='76d1c748-51ed-435b-bcd8-3d9c9d3eb68a'):\n    'Used to fetch api result using the request id received in responses.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_call': return_dict})",
            "def get_a_specific_item():\n    'This will return a specific item from the collection ..,simpily write the id of the product and you will get the product'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_a_specific_item_shoes_collections': return_dict})",
            "def qr_code_image(size: int=5, url: str='www.google.com'):\n    \"this end point takes a 'GET' request with url / string and an size / integer as parameters and returns a QR Code image of the desired size.\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'qr_code_image_variable_size_qr_code_api': return_dict})",
            "def get_products_from_category(category_url: str='smart-wristband-c_11351/', page: int=1):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_products_from_category_gearbest': return_dict})",
            "def magic_magik_get(url: str='', scale: int=None):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'magic_magik_get_image': return_dict})",
            "def get_gas_price(chainId: int=1):\n    'Gets the best estimate for gas price to use in a transaction.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_gas_price_uniblock': return_dict})",
            "def get_id(id: int=1):\n    'Get ID'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_id_fastingcenters': return_dict})",
            "def aliexpress_item_detail_simple(itemId: int=3256804591426248, locale: str='', currency: str='', region: str=''):\n    'All details of a single item.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'aliexpress_item_detail_simple_aliexpress_datahub': return_dict})",
            "def get_customized_plan(fitness_goals: str='strength', fitness_level: str='beginner', muscle: str='biceps', equipment: str='dumbbells', time: int=30):\n    'The /customized endpoint provides a way for users to generate personalized workout plans based on their preferences. It takes various parameters into account to create a workout plan tailored to the user\\'s needs. \\n\\tHere\\'s an explanation of the parameters and how to use them:\\n\\t1. time: This parameter represents the duration of the workout plan in minutes. By default, if not provided, it is set to 30 minutes. You can customize this parameter to specify the desired duration of your workout.\\n\\t2. equipment : This parameter allows you to specify the equipment available for your workout. If you don\\'t have any equipment, you can set it to \"none\". However, if you have specific equipment available, you can provide the details in this parameter.\\n\\t3. muscle: This parameter represents the target muscle group for your workout plan. You can specify the muscle group you want to focus on, such as \"legs\", \"chest\", \"back\", etc. If you don\\'t have a specific target muscle group, you can set it to \"none\".\\n\\t4. fitness_level: This parameter enables you to define your fitness level. You can choose from options like \"beginner\", \"intermediate\", or \"advanced\" to indicate your current fitness level. The workout plan generated will be adjusted based on this level. \\n\\t5. fitness_goals: This parameter allows you to specify your fitness goals, such as \"weight_loss\", \"muscle_gain\", \"strength_training\", \"cardiovascular_endurance\", \"flexibility\", or \"general_fitness\". By indicating your goals, the generated workout plan will align with your specific objectives.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_customized_plan_workout_planner': return_dict})",
            "def fixture_ticker(locale: str='DE', fixture_id: int=3886606):\n    'Get fixture ticker by fixture_id, live-ticker'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'fixture_ticker_transfermarkt_db': return_dict})"
        ],
        "ToolName": "face_compare",
        "Input": "I have a task for you: I want to compare the faces of two individuals, John and Jane, to see if they are a match. Can you fetch the result of the face comparison using the request ID '76d1c748-51ed-435b-bcd8-3d9c9d3eb68a'?"
    },
    {
        "Output_Original": [
            "get_event()",
            "today_in_history"
        ],
        "Output": "get_event()",
        "context": [
            "def get_event():\n    'Gets a detailed summary of an event.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_event': return_dict})",
            "def products_list_deprecated(page: str='1', pagesize: str='60', category: str='women-new-arrivals', sort: str='', size: str='Medium', maxprice: str='250', color: str='red'):\n    'List products by category'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'products_list_deprecated_forever21': return_dict})",
            "def leaguegroupmatches(tournamentId: int=1469, seasonId: int=41897):\n    'Get the groups matches for a specific season of a football league by providing the group tournament ID and season ID.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'leaguegroupmatches_footapi': return_dict})",
            "def getdomaintech(domain: str=''):\n    'retrieve domain technology information'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getdomaintech_runs_tech': return_dict})",
            "def list_playlist_videos(nextToken: str='', playlistId: str='PLeCdlPO-XhWFzEVynMsmosfdRsIZXhZi0', lang: str=''):\n    \"This endpoint lists **available** videos of a YouTube playlist (unavailable ones won't be listed by YouTube). Pagination scraping is supported. Thumbnails won't be blurred by age safety.\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'list_playlist_videos_youtube_media_downloader': return_dict})",
            "def products_v2_list_similarities_deprecating(id: int=9851612, store: str='US'):\n    'List similar products by product id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'products_v2_list_similarities_deprecating_asos': return_dict})",
            "def userid(username: str='instagram'):\n    'Get instagram user id by username'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'userid_instagram_v13': return_dict})",
            "def get_svg_pattern(name: str='waves-1', scale: int=2, moveLeft: int=0, angle: int=100, strokeJoin: str='round', moveTop: int=0, colors: str='E11D48|rgb(234,179,8)', spacing: str='0|0', stroke: int=3):\n    'Get SVG Pattern'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_svg_pattern_pattern_monster': return_dict})",
            "def new_free_ios_apps(category: str='6016', country: str='us', lang: str='en'):\n    'Get list of new free ios apps'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'new_free_ios_apps_app_store': return_dict})",
            "def get_all_vessels():\n    'Return all available on board vessels.\\n\\tVisit our [demo site](https://core-api.net/vessel/map.html)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_vessels_vessel_data': return_dict})"
        ],
        "ToolName": "today_in_history",
        "Input": "I am curious about historical events that took place on this day. Can you provide me with a detailed summary of a random historical event?"
    },
    {
        "Output_Original": [
            "v1_memes()",
            "programming_memes_images"
        ],
        "Output": "v1_memes()",
        "context": [
            "def v1_memes():\n    'Get Random Programming Memes'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'v1_memes': return_dict})",
            "def event_scorecard_cricket(event_id: str='tK1xeE9p', locale: str='en_INT'):\n    'Get a scorecard on an event (cricket) by event ID'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'event_scorecard_cricket_flashlive_sports': return_dict})",
            "def location_information(locationid: str='331004901'):\n    'Get Instagram location information by Instagram location id.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'location_information_instagram_v5': return_dict})",
            "def calculate_repayment_schedule(installmentCount: str='', principalAmount: str='', annualInterestRate: str='', startDate: str='', repaymentInterval: str=''):\n    'This endpoint calculates repayment schedule.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'calculate_repayment_schedule_loan_amortization_calculator': return_dict})",
            "def get_asin(asin: str='B07WDSD7G7', locale: str='us'):\n    'This endpoint get data from Amazon ASIN. You have to select a supported locale (us, uk, de, fr, es, it).'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_asin_amazon_live_data': return_dict})",
            "def driver_standings(season_id: int=2020):\n    'Displays the driver standings for a given season.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'driver_standings_f1_live_motorsport_data': return_dict})",
            "def video_data(video_id: str='hs1W2KQluWA'):\n    'Get downloadable links of the Video'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'video_data_youtube_v2': return_dict})",
            "def stages_list(locale: str='en_INT', sport_id: int=1):\n    'Get a list of stages by sport ID'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'stages_list_flashlive_sports': return_dict})",
            "def get_items_ids_by_query(query: str='case'):\n    'Enter a (text) query and retrieve the IDS associated to your items. This ID will be needed in order to explore market information.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_items_ids_by_query_steam_market_and_store': return_dict})",
            "def top_search(keyword: str='morocco', publish_time: int=0, sort_type: int=0, offset: str='0', count: str='20', use_filters: int=0, cookie: str=''):\n    'Top Search: videos, hashtags, sounds, users'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'top_search_scraptik': return_dict})"
        ],
        "ToolName": "programming_memes_images",
        "Input": "I'm organizing a team-building event for my company. Please provide me with a collection of programming memes to use as icebreakers and promote a fun atmosphere."
    },
    {
        "Output_Original": [
            "get_all_bodies_positions(\"latitude\" = 40.7128,  \"longitude\" = -74.0060,  \"from_date\" = \"2017-12-20\",  \"to_date\" = \"2017-12-21\")",
            "astronomy"
        ],
        "Output": "get_all_bodies_positions(latitude= 40.7128,  longitude= -74.0060,  from_date= \"2017-12-20\",  to_date= \"2017-12-21\")",
        "context": [
            "def get_all_bodies_positions(latitude: int=33.775867, longitude: int=(- 84.39733), from_date: datetime=((2017 - 12) - 20), to_date: datetime=((2017 - 12) - 21), elevation: int=166, time: str='12:00:00'):\n    'Returns a iterable list of bodies and their properties in tabular format.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_bodies_positions': return_dict})",
            "def articlesbyevent():\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'articlesbyevent_spaceflight_news': return_dict})",
            "def search_term(q: str='\"fashion week\"', tsi: int=1677067077000, ts: int=1675159335000):\n    'search term'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'search_term_fashion_industry_news_data_collection': return_dict})",
            "def tournament_data(tournament_id: int=1):\n    'Get tournament data by tournament id'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'tournament_data_sofascores': return_dict})",
            "def driverinformation(driverid: str='driverid'):\n    'Each driver listed in the response is identified by a unique driverId which is used to identify the driver throughout the API. To obtain information about a particular driver append the driverId\\n\\t\\n\\tThis endpoint is to obtain the information of a particular driver based on the driverid (driver name)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'driverinformation_formula_1_fixed': return_dict})",
            "def articles(sort_: str='title', limit_: int=10):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'articles_spaceflight_news': return_dict})",
            "def listofalldriverswithinayear(year: str='year'):\n    'This endpoint is to obtain a list of all drivers in a particular season (year)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'listofalldriverswithinayear_formula_1_fixed': return_dict})",
            "def get_news():\n    'All Latest news from India Today Platform'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_news_india_today_unofficial': return_dict})",
            "def listofallcircuits():\n    'This endpoint is to obtain a list of all constructors.\\n\\t\\n\\t\\n\\tCircuit lists can be refined by adding one or more of the following criteria:\\n\\t\\n\\t/constructors/<constructorId>\\n\\t/drivers/<driverId>\\n\\t/grid/<position>\\n\\t/results/<position>\\n\\t/fastest/<rank>\\n\\t/status/<statusId>\\n\\t\\n\\tFor example, to list all circuits at which a specific driver has driven for a particular constructor:\\n\\t\\n\\thttp://ergast.com/api/f1/drivers/alonso/constructors/mclaren/circuits'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'listofallcircuits_formula_1_fixed': return_dict})",
            "def repost(article_url: str='', title: str='', author_url: str='', author_name: str=''):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'repost_telegrapher': return_dict})"
        ],
        "ToolName": "astronomy",
        "Input": "I'm planning a family trip to a remote location with minimal light pollution. Can you recommend the best spot for stargazing based on the positions of celestial bodies?"
    },
    {
        "Output_Original": [
            "fetch_events(\"c\" = \"specific_calendar\",  \"json\" = true)",
            "calendars"
        ],
        "Output": "fetch_events(c= \"specific_calendar\",  json_arg= True)",
        "context": [
            "def fetch_events(c: ENUM=None, json_arg: bool=True):\n    'Fetches a list of events in either JSON or iCalendar format for the selected calendar'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'fetch_events': return_dict})",
            "def products_search_by_barcode(store_id: str='911', barcode: str='195339816801'):\n    'Search product by barcode'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'products_search_by_barcode_target': return_dict})",
            "def news(page: str='1', limit: str='10'):\n    'get crypto news'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'news_all_in_one_crypto_swiss_knife': return_dict})",
            "def user_followers(count: int=12, userid: int=25025320, end_cursor: str=''):\n    'Get instagram user followers by user id.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'user_followers_instagram_v13': return_dict})",
            "def get_all_vessels():\n    'Return all available on board vessels.\\n\\tVisit our [demo site](https://core-api.net/vessel/map.html)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_all_vessels_vessel_data': return_dict})",
            "def orders():\n    'Get runs orders'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'orders_vinhub': return_dict})",
            "def health_check():\n    'Provide a way to test connectivity to API'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'health_check_gis_engine': return_dict})",
            "def list_of_all_categories():\n    'Get all Categories:\\n\\t\\n\\t```\\n\\t    {\\n\\t        \"id\": 3,\\n\\t        \"name\": \"ATV\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 4,\\n\\t        \"name\": \"Allround\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 12,\\n\\t        \"name\": \"Classic\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 8,\\n\\t        \"name\": \"Cross / motocross\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 7,\\n\\t        \"name\": \"Custom / cruiser\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 14,\\n\\t        \"name\": \"Enduro / offroad\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 11,\\n\\t        \"name\": \"Minibike, cross\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 10,\\n\\t        \"name\": \"Minibike, sport\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 6,\\n\\t        \"name\": \"Naked bike\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 1,\\n\\t        \"name\": \"Prototype / concept model\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 5,\\n\\t        \"name\": \"Scooter\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 18,\\n\\t        \"name\": \"Speedway\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 2,\\n\\t        \"name\": \"Sport\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 17,\\n\\t        \"name\": \"Sport touring\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 9,\\n\\t        \"name\": \"Super motard\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 13,\\n\\t        \"name\": \"Touring\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 15,\\n\\t        \"name\": \"Trial\"\\n\\t    },\\n\\t    {\\n\\t        \"id\": 16,\\n\\t        \"name\": \"Unspecified category\"\\n\\t    }\\n\\t```'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'list_of_all_categories_motorcycle_specs_database': return_dict})",
            "def getassetsbycontractinformation(token_id: str='', contract_address: str='', type: str=''):\n    'This request will return asset_id wrapped with return code and error code'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getassetsbycontractinformation_reddio_nft_token_and_ipfs': return_dict})",
            "def get_vessels_by_geo_position(latitude: int=0, longitude: int=0):\n    'Return available vessels within 300 nautical miles radius of the given geo coordinate.\\n\\tVisit our [demo site](https://core-api.net/vessel/map.html)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_vessels_by_geo_position_vessel_data': return_dict})"
        ],
        "ToolName": "calendars",
        "Input": "I'm organizing a company event and need to create a schedule. Fetch the events from a specific calendar and provide them in JSON format."
    },
    {
        "Output_Original": [
            "validate_wa_number_free(\"phone\" = 1234567890,  \"token\" = \"abc123\")",
            "bulk_whatsapp_validator"
        ],
        "Output": "validate_wa_number_free(phone= 1234567890,  token= \"abc123\")",
        "context": [
            "def validate_wa_number_free(phone: int=34605797764, token: str='ENTER_HERE_A_TEMP_TOKEN'):\n    'You need a **valid token** to use this endpoint, learn how to get it on this [video](https://youtu.be/TcaAwKpAkl8). \\n\\tThe response is `True` if the phone is registered on whatsapp.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'validate_wa_number_free': return_dict})",
            "def getallproduct_simages(productId: str='productId'):\n    '<p>Searches for all the images of a single product.<br></p>\\n\\t\\n\\t<b>Important information:<br><b/>\\n\\t <b><ul>\\n\\t <li><a href = \"https://docs.ecartapi.com/?version=latest#6870b009-81d8-42c6-b910-3aaca8e5d0f2\"> The product\\'s ID must exist</a></li>\\n\\t </ul></b>\\n\\t \\n\\t<h3>FILTERS</h3>\\n\\t<table>\\n\\t <thead>\\n\\t  <tr>\\n\\t   <td>Filter</td>\\n\\t   <td>Description</td>\\n\\t  </tr>\\n\\t </thead>\\n\\t <tbody>\\n\\t<tr>\\n\\t   <td><code>sinceId</code></td>\\n\\t   <td>Filter items since the Id given</td>\\n\\t  </tr>\\n\\t</tbody>\\n\\t</table>'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getallproduct_simages_ecartapi': return_dict})",
            "def location_feed(location_id: int=213385402, end_cursor: str='2312589909032003834'):\n    'Get location post feed'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'location_feed_instagram_data': return_dict})",
            "def vehicles_makes():\n    'List of Vehicle Makes. A list of every make and model used by this API is at https://www.carbonsutra.com/data-vehicle-make-model.html'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'vehicles_makes_carbonsutra': return_dict})",
            "def user_followings(end_cursor: str='', username: str='instagram', user_id: str=''):\n    'Get user followings\\n\\t\\n\\t**NOTE:** By using **user_id** instead of the username your request will be executed much faster\\n\\t**NOTE:** Profile should be public(not private)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'user_followings_instagram_data': return_dict})",
            "def user_story_highlight_metadata(url: str='https://www.instagram.com/stories/highlights/17866745050538306/'):\n    'Get user story highlight metadata from a direct url to a story'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'user_story_highlight_metadata_instagram_data': return_dict})",
            "def airports_by_keyword(keyword: str=''):\n    'Returns the lists of airport names and IATA code which matches the keyword.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'airports_by_keyword_carbonsutra': return_dict})",
            "def title_get_filming_locations(tconst: str='tt0944947'):\n    'Get filming locations information'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'title_get_filming_locations_online_movie_database': return_dict})",
            "def nearest_airport_from_postal_code(postal_code: str='', country_code: str=''):\n    'This is an advanced algorithm which takes a postal code and country code as input and returns the nearest airport its lat-long value. It is important to note that the straight line distance between the lat-long of postal code and airport is measured. The returned value is in kilometers. The source of 1.5 million postal code data is taken as it is from https://public.opendatasoft.com/explore/dataset/geonames-postal-code/. For airports, the publicly available database of IATA codes and airport names is used.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'nearest_airport_from_postal_code_carbonsutra': return_dict})",
            "def user_information_metadata_by_user_id(user_id: int=25025320):\n    'Get user information(followers, followings and etc) by using user id (numbers)'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'user_information_metadata_by_user_id_instagram_data': return_dict})"
        ],
        "ToolName": "bulk_whatsapp_validator",
        "Input": "I'm planning a surprise birthday party for my sister. Can you help me validate her WhatsApp number using the Bulk Whatsapp Validator API?"
    },
    {
        "Output_Original": [
            "get_coin_ohlc_data(\"uuid\" = \"Qwsogvtv82FCd\",  \"interval\" = \"day\",  \"limit\" = 7)",
            "coinranking"
        ],
        "Output": "get_coin_ohlc_data(uuid= \"Qwsogvtv82FCd\",  interval= \"day\",  limit= 7)",
        "context": [
            "def get_coin_ohlc_data(uuid: str='Qwsogvtv82FCd', referenceCurrencyUuid: str='yhjMzLPhuIDl', limit: int=None, interval: str='day'):\n    'Get OHLC (Open High Low Close) data for the coin throughout time.\\n\\tThis endpoint requires the **ultra** plan or higher.\\n\\t\\n\\t**Beta**\\n\\tThe OHLC endpoint is currently in beta. This means we might make some changes that could be considered breaking for your application, and we expect to have downtime every now and then while we are still in beta.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_coin_ohlc_data': return_dict})",
            "def generating_company_wide_reports(format: str='json, xml, csv', tq: str=\"SELECT week_worked_on, assignment_team_id, sum(hours), sum(charges) WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'\", company: int=12345):\n    'Time reports can be generated on a company-wide level. All time reports fields are supported on this level except earnings related fields. In order to access this API the authorized user needs either hiring or finance permissions to all teams within the company.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'generating_company_wide_reports_odesk_apis': return_dict})",
            "def get_stock_news():\n    'Get individual stock news'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'get_stock_news_stock_news': return_dict})",
            "def merchant_credit_card_reward_lookup(query: str='Singapore airline', country: str='SG'):\n    'This is an API designed to retrieve comprehensive information about merchants, in addition to providing associated data on qualifying credit card rewards.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'merchant_credit_card_reward_lookup_merchant_credit_card_reward': return_dict})",
            "def nal_path(num: int=[]):\n    'Convierte un n\u00famero a letras'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'nal_path_n_meros_a_letras': return_dict})",
            "def exchange_information(symbol: str='BTCUSDT'):\n    'Current exchange trading rules and symbol information'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'exchange_information_crypto_markets': return_dict})",
            "def generate_time_reports_for_a_specific_team(format: str='json, xml, csv', tq: str=\"SELECT worked_on, provider_id, provider_name, sum(hours) WHERE worked_on >= '2009-10-01' AND worked_on <= '2009-10-31'\", company: int=12345, team: int=34567):\n    'Time reports can be generated for a specific team, with or without detailed monetary information based on the relationship of the authorized user at the time the call is made and what information is included in the call.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'generate_time_reports_for_a_specific_team_odesk_apis': return_dict})",
            "def getpdfinstoragetoxlsx(name: str='', uniformWorksheets: bool=True, scaleFactor: int=None, insertBlankColumnAtFirst: bool=True, folder: str='', minimizeTheNumberOfWorksheets: bool=True, storage: str=''):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getpdfinstoragetoxlsx_aspose_pdf_cloud': return_dict})",
            "def abuse_contact_lookup(domain: str='twitter.com', output: str='json'):\n    'Used to find the abuse contact address for a domain name. This is where you would send complaints about spam originating from that domain.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'abuse_contact_lookup_viewdns': return_dict})",
            "def mac_address_lookup(mac: str='00-05-02-34-56-78', output: str=''):\n    'This tool will display the name of the company that manufactured a specific network device based on its MAC Address.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'mac_address_lookup_viewdns': return_dict})"
        ],
        "ToolName": "coinranking",
        "Input": "Retrieve the historical OHLC data for the cryptocurrency with the UUID 'Qwsogvtv82FCd' for the last 7 days."
    },
    {
        "Output_Original": [
            "severe_weather_alerts(\"lat\" = 29.7604,\"lon\" = -95.3698)",
            "weather"
        ],
        "Output": "severe_weather_alerts(lat= 29.7604,lon= -95.3698)",
        "context": [
            "def severe_weather_alerts(lat: int=38.5, lon: int=(- 78.5)):\n    'Get servere weather alerts from local meteorlogical agencies (US, EU, and Isreal supported )'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'severe_weather_alerts': return_dict})",
            "def news_list(type: str='index'):\n    'List latest news'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'news_list_cricbuzz_cricket': return_dict})",
            "def getrandomimage():\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getrandomimage_mikuapi': return_dict})",
            "def series_get_stats_filters(seriesId: int=3718):\n    'Get supported filters'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'series_get_stats_filters_cricbuzz_cricket': return_dict})",
            "def ufc_fight_night_vettori_vs_cannonier_june_17_2023(limit: int=None, offset: int=None):\n    \"**UFC Fight Night: Vettori vs. Cannonier**.                                                          \\n\\t Access a range of information about each fighter, including their win-loss record, height, weight, reach, and age. results of a particular fight or a fighter's win-loss record.\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'ufc_fight_night_vettori_vs_cannonier_june_17_2023_mma_stats': return_dict})",
            "def ufc_fight_night_emmett_vs_topuriar_june_24_2023(offset: int=None, limit: int=None):\n    \"**UFC Fight Night: Emmett vs. Topuria**.                                                          \\n\\t Access a range of information about each fighter, including their win-loss record, height, weight, reach, and age. results of a particular fight or a fighter's win-loss record.\"\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'ufc_fight_night_emmett_vs_topuriar_june_24_2023_mma_stats': return_dict})",
            "def localized_routes():\n    'localized-routes data'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'localized_routes_betsports': return_dict})",
            "def stats_get_records(statsType: str='mostRuns', year: int=None, opponent: int=None, team: int=None, matchType: int=None):\n    'Get records'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'stats_get_records_cricbuzz_cricket': return_dict})",
            "def getimage(fileId: str=''):\n    ' '\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'getimage_mikuapi': return_dict})",
            "def video_details(modules: str='A comma-delimited list of one or more insights to request.', id: str=\"An ID that uniquely identifies a video. The Video object's videoId field contains the ID that you set this parameter to.\"):\n    'Get insights about a video, such as related videos.'\n    args_dict = locals()\n    global correctness\n    return_dict = {}\n    for (key, value) in args_dict.items():\n        if value:\n            return_dict[key] = value\n    correctness.append({'video_details_bing_video_search': return_dict})"
        ],
        "ToolName": "weather",
        "Input": "I'm a photographer and I need to plan my outdoor shoot. Can you fetch the active severe weather alerts for my location and provide the current weather data, including temperature and cloud coverage? Also, retrieve the hourly forecast for the shoot day."
    }
]